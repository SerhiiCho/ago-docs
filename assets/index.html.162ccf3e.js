import{_ as o,r as p,o as i,c,a as s,b as n,d as t,e}from"./app.7c630d6b.js";const l={},r=s("h1",{id:"documentation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#documentation","aria-hidden":"true"},"#"),n(" Documentation")],-1),u=s("p",null,'Date/time converter into "n time ago" format that supports multiple languages. You can contribute any language that you wish easily by creating a pull request. I would gladly merge it in if you follow the simple steps.',-1),d={href:"https://github.com/SerhiiCho/ago/issues/new",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="🐘-supported-php-versions" tabindex="-1"><a class="header-anchor" href="#🐘-supported-php-versions" aria-hidden="true">#</a> 🐘 Supported PHP versions</h2><ul><li>✅ 7.1</li><li>✅ 7.2</li><li>✅ 7.3</li><li>✅ 7.4</li><li>✅ 8.0</li><li>✅ 8.1</li><li>✅ 8.2</li><li>✅ 8.3</li></ul><h2 id="⚙️-configurations" tabindex="-1"><a class="header-anchor" href="#⚙️-configurations" aria-hidden="true">#</a> ⚙️ Configurations</h2><h3 id="set-language" tabindex="-1"><a class="header-anchor" href="#set-language" aria-hidden="true">#</a> Set language</h3><p>Default language is English. Optionally you can set the language in your application by calling <code>set()</code> method and passing a flag <code>ru</code> for Russian or <code>en</code> for English language. You can see supported languages in the next section.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name class-name-fully-qualified static-context">Serhii<span class="token punctuation">\\</span>Ago<span class="token punctuation">\\</span>Lang</span><span class="token operator">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ru&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="supported-languages" tabindex="-1"><a class="header-anchor" href="#supported-languages" aria-hidden="true">#</a> Supported languages</h3><table><thead><tr><th>Flag</th><th>Language</th><th>Code (ISO 639-1)</th></tr></thead><tbody><tr><td>🇬🇧</td><td>English</td><td>en</td></tr><tr><td>🇷🇺</td><td>Russian</td><td>ru</td></tr><tr><td>🇺🇦</td><td>Ukrainian</td><td>uk</td></tr><tr><td>🇳🇱</td><td>Dutch</td><td>nl</td></tr><tr><td>🇩🇪</td><td>German</td><td>de</td></tr></tbody></table><blockquote><p>Make sure to update the package to the latest version to get the latest languages support.</p></blockquote><h3 id="overwrite-translations" tabindex="-1"><a class="header-anchor" href="#overwrite-translations" aria-hidden="true">#</a> Overwrite translations</h3><p>There are cases when you want to replace certain words with specific ones. You can do it with “Overwrites”. All you need to do is just to pass <code>array&lt;string, string&gt;</code> of values that you want to overwrite.</p><p>For example, instead of <code>1 minute ago</code> you want to have the output <code>1 minute before</code>. To achieve that, create <code>[&#39;ago&#39; =&gt; &#39;before&#39;]</code> array and pass it as the second argument to method <code>set()</code> in <code>Serhii\\Ago\\Lang</code> class.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Lang</span><span class="token operator">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;en&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;ago&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;before&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;day&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Day&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;days&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Days&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),g={href:"https://github.com/SerhiiCho/ago/tree/master/resources/lang",target:"_blank",rel:"noopener noreferrer"},h=e(`<h2 id="👏-usage" tabindex="-1"><a class="header-anchor" href="#👏-usage" aria-hidden="true">#</a> 👏 Usage</h2><p>For outputting post publishing date or something else you can just pass the date to method <code>trans()</code>. It will count the interval between now and given date and returns needed format. The methods excepts a timestamp, date string, Carbon instance or DateTime.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Serhii<span class="token punctuation">\\</span>Ago<span class="token punctuation">\\</span>TimeAgo</span><span class="token punctuation">;</span>

<span class="token class-name static-context">TimeAgo</span><span class="token operator">::</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;now - 10 seconds&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 10 seconds ago</span>
<span class="token class-name static-context">TimeAgo</span><span class="token operator">::</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">86400</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 1 day ago</span>
<span class="token class-name static-context">TimeAgo</span><span class="token operator">::</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Carbon<span class="token punctuation">\\</span>Carbon</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">subDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 1 day ago</span>
<span class="token class-name static-context">TimeAgo</span><span class="token operator">::</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Carbon<span class="token punctuation">\\</span>CarbonImmutable</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">subDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 1 day ago</span>
<span class="token class-name static-context">TimeAgo</span><span class="token operator">::</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>DateTime</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;now - 5 minutes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 5 minutes ago</span>
<span class="token class-name static-context">TimeAgo</span><span class="token operator">::</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>DateTimeImmutable</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;now - 5 minutes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 5 minutes ago</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you pass the date in the future, it will output the interval to this date. It&#39;s very convenient, because you can pass almost any date format and it will give you the correct output.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">TimeAgo</span><span class="token operator">::</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">86400</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 1 day</span>
<span class="token class-name static-context">TimeAgo</span><span class="token operator">::</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;now + 10 minutes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 10 minutes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>If you use version &lt; 2.2.0 then TimeAgo::trans() method except only type string.</p></blockquote><h2 id="🤲-options" tabindex="-1"><a class="header-anchor" href="#🤲-options" aria-hidden="true">#</a> 🤲 Options</h2><p>As the seconds argument <code>trans</code> method excepts array of options or single option. Here is an example of passed options.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Serhii<span class="token punctuation">\\</span>Ago<span class="token punctuation">\\</span>Option</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Serhii<span class="token punctuation">\\</span>Ago<span class="token punctuation">\\</span>TimeAgo</span><span class="token punctuation">;</span>

<span class="token class-name static-context">TimeAgo</span><span class="token operator">::</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;yesterday&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 day ago</span>
<span class="token class-name static-context">TimeAgo</span><span class="token operator">::</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;yesterday&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Option</span><span class="token operator">::</span><span class="token constant">NO_SUFFIX</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 day</span>
<span class="token class-name static-context">TimeAgo</span><span class="token operator">::</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name static-context">Option</span><span class="token operator">::</span><span class="token constant">ONLINE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Online</span>
<span class="token class-name static-context">TimeAgo</span><span class="token operator">::</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name static-context">Option</span><span class="token operator">::</span><span class="token constant">JUST_NOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Just now</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="available-options" tabindex="-1"><a class="header-anchor" href="#available-options" aria-hidden="true">#</a> Available options</h3><p>All options are available in <code>Serhii\\Ago\\Option::class</code> as constants.</p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>ONLINE</td><td>Display &quot;Online&quot; if date interval within 60 seconds. After 60 seconds output will be the same as usually &quot;x time ago&quot; format. Incompatible with option <code>JUST_NOW</code></td></tr><tr><td>NO_SUFFIX</td><td>Remove suffix from date and have &quot;5 minutes&quot; instead of &quot;5 minutes ago&quot;.</td></tr><tr><td>JUST_NOW</td><td>Prints <code>Just now</code> when time is within 1 minutes. For example instead of <code>34 seconds ago</code> it will print <code>Just now</code>. Incompatible with option <code>ONLINE</code>.</td></tr></tbody></table><h2 id="🎁-contribute-another-language" tabindex="-1"><a class="header-anchor" href="#🎁-contribute-another-language" aria-hidden="true">#</a> 🎁 Contribute another language</h2>`,13),m={href:"https://github.com/SerhiiCho/ago/commit/5a7d58569d6cd0af1d7981f3256f59ce19a6ad0e",target:"_blank",rel:"noopener noreferrer"},v=s("h3",{id:"how-to-make-a-pr",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#how-to-make-a-pr","aria-hidden":"true"},"#"),n(" How to make a PR")],-1),b=s("p",null,"Before you start working on issue, add a comment to it, so that other folks know that someone is already working on it.",-1),f={href:"https://github.com/SerhiiCho/ago/branches",target:"_blank",rel:"noopener noreferrer"},y=e(`<h3 id="_1-step-adding-translation" tabindex="-1"><a class="header-anchor" href="#_1-step-adding-translation" aria-hidden="true">#</a> 1 Step. Adding translation</h3><p>Translation files live in <code>resources/trans</code> directory. Here is the example of the language file for Russian language.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;ago&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;назад&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;just_now&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Только что&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;online&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;В сети&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;second&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;секунда&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;seconds&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;секунды&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;seconds-special&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;секунд&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;minute&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;минута&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;minutes&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;минуты&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;minutes-special&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;минут&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// ... etc ...</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Every translation file return array of translations. Note that <code>&#39;second-special&#39;</code> key is optional and can be used for languages that have not only singular and plural form for words like <strong>day</strong>, <strong>minute</strong>, etc... but more.</p><h3 id="_2-step-adding-rules" tabindex="-1"><a class="header-anchor" href="#_2-step-adding-rules" aria-hidden="true">#</a> 2 Step. Adding rules</h3><p>Rules live in <code>resources/rules</code> directory. Here is the example of the rule file for Russian language.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$number</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$last_digit</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;single&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token variable">$number</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token variable">$last_digit</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$number</span> <span class="token operator">&gt;=</span> <span class="token number">21</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;plural&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token variable">$number</span> <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$number</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span>
            <span class="token variable">$number</span> <span class="token operator">&gt;=</span> <span class="token number">22</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$last_digit</span> <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$last_digit</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;special&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token variable">$number</span> <span class="token operator">&gt;=</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$number</span> <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">,</span>
            <span class="token variable">$last_digit</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token variable">$last_digit</span> <span class="token operator">&gt;=</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$last_digit</span> <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Every rule file should return a callback function with 2 parameters. The callback returns array of associative array. The array contains rules for 3 forms.</p><ul><li><code>single</code> form for words in a single form, like minute, day, year, etc.</li><li><code>plural</code> form for words in a plural form, like minutes, days, years, etc.</li><li><code>special</code> <em>(optional)</em> form for special cases, for example in Russian, and Ukrainian we have special forms for words: <strong>недель</strong>, <strong>месяцев</strong>, etc. They are different from single and plural form. So we need to have separate rules for them.</li></ul><p>Each form has a boolean rule or array of boolean rules. In Russian example we say that we want to use <code>single</code> form when last digit of the number is equal to 1 or number is 0. Now when we see date <code>1 day ago</code> in Russian the output will be <code>1 день назад</code>, which is the correct translation that we got from <code>resources/lang/ru.php</code> file where we have line <code>&#39;day&#39; =&gt; &#39;день&#39;</code>. We can give either boolean to each rule or array of booleans when we have many cases for the form. In our example we have 3 cases for <code>special</code> form. If one of them will be true, special form will be applied.</p><h3 id="_3-step-adding-tests" tabindex="-1"><a class="header-anchor" href="#_3-step-adding-tests" aria-hidden="true">#</a> 3 Step. Adding tests</h3>`,11),w=s("code",null,"tests/Translations",-1),x={href:"https://phpunit.de/manual/3.7/en/writing-tests-for-phpunit.html",target:"_blank",rel:"noopener noreferrer"},_=e(`<h3 id="_4-step-add-1-line-to-readme-md" tabindex="-1"><a class="header-anchor" href="#_4-step-add-1-line-to-readme-md" aria-hidden="true">#</a> 4 Step. Add 1 line to README.md</h3><p>After all tests are passing, you need to do last step and add language support to README.md file to <strong>Supported languages</strong> section.</p><h2 id="🚀-quick-start" tabindex="-1"><a class="header-anchor" href="#🚀-quick-start" aria-hidden="true">#</a> 🚀 Quick Start</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> require serhii/ago
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4);function q(T,A){const a=p("ExternalLinkIcon");return i(),c("div",null,[r,u,s("p",null,[n("This package is well tested, optimized and already used in many production apps. It has shown itself pretty well. If you find any issues or bugs 🐞, please create an "),s("a",d,[n("issue"),t(a)]),n(", and I'll fix it as soon as I can.")]),k,s("blockquote",null,[s("p",null,[n("The list of all default key values you can find in "),s("a",g,[n("resources/lang"),t(a)]),n(" directory.")])]),h,s("p",null,[n("If you want to contribute support for a language that is fully supported, all you need to do is to copy/paste 3 files and change them to match the language that you want to add. Then add 1 line to README.md file. Here is my "),s("a",m,[n("commit"),t(a)]),n(" for supporting Ukrainian language that shows changes that I did. You need to add 3 files for supporting another language. Here are 4 steps that you need to follow.")]),v,b,s("p",null,[n("When you make a pull request, make sure that you don't pull it in the master branch. Pull it in the next package version. The name of the package version (Realease) matches the name of the branch. You can go to the "),s("a",f,[n("branches"),t(a)]),n(" page, and see what is the latest branch that is not merged, that branch is going to be the next package update.")]),y,s("p",null,[n("Tests for all translations are live in "),w,n(" directory. Just copy one of the existing tests and change it whatever you want to match your language. Just make sure you have enough cases to cover specifics of your language. If you don't know about "),s("a",x,[n("PHPUnit Data Providers"),t(a)]),n(" you might want to read about it.")]),_])}const I=o(l,[["render",q],["__file","index.html.vue"]]);export{I as default};
